[
    {
        "id": "10acdf134f09496b",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "05a898277f7030d9",
        "type": "websocket-listener",
        "path": "/ws/publishMessage",
        "wholemsg": "false"
    },
    {
        "id": "2cca224ba1e28d70",
        "type": "websocket-listener",
        "z": "10acdf134f09496b",
        "path": "/ws/simple",
        "wholemsg": "false"
    },
    {
        "id": "fb9f59a989eec8ea",
        "type": "inject",
        "z": "10acdf134f09496b",
        "name": "Tick every 5 secs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "test",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "66844de1f4f53a29"
            ]
        ]
    },
    {
        "id": "66844de1f4f53a29",
        "type": "websocket out",
        "z": "10acdf134f09496b",
        "name": "",
        "server": "2cca224ba1e28d70",
        "client": "",
        "x": 690,
        "y": 260,
        "wires": []
    },
    {
        "id": "7f96da0591a0b36a",
        "type": "http response",
        "z": "10acdf134f09496b",
        "name": "",
        "x": 661,
        "y": 200,
        "wires": []
    },
    {
        "id": "b27b7158a6c45e74",
        "type": "http in",
        "z": "10acdf134f09496b",
        "name": "",
        "url": "/simple",
        "method": "get",
        "swaggerDoc": "",
        "x": 292,
        "y": 200,
        "wires": [
            [
                "dacef3f6dd1028a2"
            ]
        ]
    },
    {
        "id": "dacef3f6dd1028a2",
        "type": "template",
        "z": "10acdf134f09496b",
        "name": "Simple Web Page",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE HTML>\n<html>\n    <head>\n    <title>Simple Live Display</title>\n    <script type=\"text/javascript\">\n        var ws;\n        var wsUri = \"ws:\";\n        var loc = window.location;\n        console.log(loc);\n        if (loc.protocol === \"https:\") { wsUri = \"wss:\"; }\n        // This needs to point to the web socket in the Node-RED flow\n        // ... in this case it's ws/simple\n        wsUri += \"//\" + loc.host + loc.pathname.replace(\"simple\",\"ws/simple\");\n\n        function wsConnect() {\n            console.log(\"connect\",wsUri);\n            ws = new WebSocket(wsUri);\n            //var line = \"\";    // either uncomment this for a building list of messages\n            ws.onmessage = function(msg) {\n                var line = \"\";  // or uncomment this to overwrite the existing message\n                // parse the incoming message as a JSON object\n                var data = msg.data;\n                //console.log(data);\n                // build the output from the topic and payload parts of the object\n                line += \"<p>\"+data+\"</p>\";\n                // replace the messages div with the new \"line\"\n                document.getElementById('messages').innerHTML = line;\n                //ws.send(JSON.stringify({data:data}));\n            }\n            ws.onopen = function() {\n                // update the status div with the connection status\n                document.getElementById('status').innerHTML = \"connected\";\n                //ws.send(\"Open for data\");\n                console.log(\"connected\");\n            }\n            ws.onclose = function() {\n                // update the status div with the connection status\n                document.getElementById('status').innerHTML = \"not connected\";\n                // in case of lost connection tries to reconnect every 3 secs\n                setTimeout(wsConnect,3000);\n            }\n        }\n        \n        function doit(m) {\n            if (ws) { ws.send(m); }\n        }\n    </script>\n    </head>\n    <body onload=\"wsConnect();\" onunload=\"ws.disconnect();\">\n        <font face=\"Arial\">\n        <h1>Simple Live Display</h1>\n        <div id=\"messages\"></div>\n        <button type=\"button\" onclick='doit(\"click\");'>Click to send message</button>\n        <hr/>\n        <div id=\"status\">unknown</div>\n        </font>\n    </body>\n</html>\n",
        "x": 489,
        "y": 200,
        "wires": [
            [
                "7f96da0591a0b36a"
            ]
        ]
    },
    {
        "id": "61af9870694ff43a",
        "type": "websocket in",
        "z": "10acdf134f09496b",
        "name": "",
        "server": "2cca224ba1e28d70",
        "client": "",
        "x": 477,
        "y": 312,
        "wires": [
            [
                "97253f0520123187"
            ]
        ]
    },
    {
        "id": "97253f0520123187",
        "type": "debug",
        "z": "10acdf134f09496b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 667,
        "y": 312,
        "wires": []
    },
    {
        "id": "2d6ba8f82d55032c",
        "type": "OpcUa-Server",
        "z": "10acdf134f09496b",
        "port": "53880",
        "name": "",
        "endpoint": "",
        "users": "users.json",
        "nodesetDir": "",
        "folderName4PKI": "",
        "autoAcceptUnknownCertificate": true,
        "registerToDiscovery": true,
        "constructDefaultAddressSpace": true,
        "allowAnonymous": true,
        "endpointNone": true,
        "endpointSign": true,
        "endpointSignEncrypt": true,
        "endpointBasic128Rsa15": true,
        "endpointBasic256": true,
        "endpointBasic256Sha256": true,
        "maxNodesPerBrowse": 0,
        "maxNodesPerHistoryReadData": 0,
        "maxNodesPerHistoryReadEvents": 0,
        "maxNodesPerHistoryUpdateData": 0,
        "maxNodesPerRead": 0,
        "maxNodesPerWrite": 0,
        "maxNodesPerMethodCall": 0,
        "maxNodesPerRegisterNodes": 0,
        "maxNodesPerNodeManagement": 0,
        "maxMonitoredItemsPerCall": 0,
        "maxNodesPerHistoryUpdateEvents": 0,
        "maxNodesPerTranslateBrowsePathsToNodeIds": 0,
        "maxConnectionsPerEndpoint": 20,
        "maxMessageSize": 4096,
        "maxBufferSize": 4096,
        "x": 440,
        "y": 400,
        "wires": [
            []
        ]
    }
]